* Tools for /Really/ Reproducible Research
** What's this?
This repository is intended as a companion to my book on "/Really/ Reproducible Research".  These are certainly not the only tools for reproducible research, and maybe not even the best ones, depending on your precise goals. But I'd submit that these are some of the best around, and the combination of these particular tools represents what I think is the /minimal/ set of tools for a /complete/ working environment in reproducible research. If you don't do statistics or quantitative analysis, you could do without R, and you might need some additional tools depending on your special needs, but this suite will get you a long way.
** Overview of the tools
Here's a quick sketch of the tools I'm talking about, and what role they play.  /ALL/ of the tools here are free (in [[http://en.wikipedia.org/wiki/Free_software][both senses of the word]]), open-sourcem and cross-platform (Windows, Mac, and Linux). They all have very large user-bases, and several have been around for a very long time. In other words, all of the tools here will be around and in active development for the foreseeable future, so rest assured that they won't go the way of the dodo anytime soon.  The large user-bases are also very useful for finding help when you run into problems.  Googling problems with these tools will often turn up the solutions you need.  All of these features (free, open-source, and large, active communities) are all very important for the purposes of reproducible research.

Here are some more details on each tool.

- [[https://github.com/][git]] :: Git is a type of version control software (VCS), sometimes also called "software content management" (SCM). It was originally written by [[http://en.wikipedia.org/wiki/Linus_Torvalds][Linus Torvalds]] to manage the development of Linux, so it is capable of some really heavy-duty, production-level, professional-quality work. But it is also extremely lightweight, and can be used easily for very small-scale simple projects as well.  The basic idea is to provide universal "track changes" and "undo" features for all the files in a project.  I highly recommend that you start using this tool as soon as possible, even before any of the others. However, the basic help and documentation for git is aimed at programmers, so if you may want to start with the tutorials I'm providing here.

- [[http://www.gnu.org/software/emacs/][Emacs]] :: Emacs is advertised as a text editor.  But it is actually a complete programming environment that runs a [[http://en.wikipedia.org/wiki/Emacs_Lisp][version]] of the [[http://en.wikipedia.org/wiki/Lisp_programming_language][Lisp]] programming language. This means that while its basic functionality is a text editor, it can be extended to encompass many, many other functions. In practice, it can provide a complete working environment, where you can not only edit documents, but also edit directories (i.e., add, delete, move, or rename folders and files), run other programs (for example, you can run an R console /inside/ Emacs), and so on. It has a very long history (the first version dates back to 1976!), and has been used by generations of some of the best computer programmers. Not that you need to be a programmer to use it, but programmers edit a /lot/ of text, so anything useable for so many programmers is more than sufficient for most researchers' text editing needs. While I propose that version control software like git is the "foundation" of a reproducible workflow, and you can start using git right away, whatever other programs you use for your work, I will present Emacs as the coordination point for the other tools. If you buy into my suggestions, Emacs will be your primary working environment, where you do virtually all of your writing, note-taking, programming, data analysis, project management, etc.

- [[http://orgmode.org/][org-mod]]e :: Org-mode is actually part of Emacs, but special enough to be treated as its own thing. In many ways, I think org-mode is one of the "killer features" of Emacs, especially for the purposes of reproducible research. Org-mode started out as a way to turn simple text into special to-do lists for organizing projects and your life (which is where the "org" comes from). But it has developed into much, much more than that, almost like a microcosm of Emacs itself. For the purposes of reproducible research, it provides an unparalleled environment for combining text with code and analysis of all kinds.  It can be used right away for very simple tasks in very handy ways, but it can accommodate very complex pieces of work, like entirely reproducible papers suitable for professional publication. In fact, this README is written in org-mode, which is converted and displayed as HTML.  In the system I'm putting together here, Emacs is the central working environment, and org-mode is the main mode of Emacs that will bring everything together. The main use will be to construct /reproducible research notebooks/ (RRNBs).  This is a way to maintain a notebook for coordinating all aspects of your research project, which is also eminently /functional/, because you can easily hyperlink to other documents and websites, run code and explore (and reproduce!) analyses, export sections to various document types for presenting and sharing, and organize your work with special to-do list functions, agendas, calendars, reminders, etc.

- [[http://www.latex-project.org/][LaTeX]] and [[http://www.bibtex.org/][BibTeX]] :: The above tools will get you a very long way with a research project, but at some point, the goal is to publish the research in a professional format, and that's where LaTeX comes in.  LaTeX is a program that processes a special kind of simple text document and turns it into beautiful, formatted documents. So it's an alternative to other ways of writing papers, like using Microsoft Word. One of the goals is to allow the writer to focus on the logical structure and content of the document, and let LaTeX deal with making it look good and conform to style requirements.  In practice, this is not always so easy, but that's why I'm writing these tutorials. LaTeX also has a long history, and is an incredibly stable and widely-used program. For some fields, such as mathematics, physics, and some areas of computer science, it is the standard for virtually all journal submissions.  Because it has such a history of success, and because it provides so much power to documents written in simple text, it is the indisputable leader in creating reproducible documents suitable for professional publication.  It also fits very smoothly into the other tools here. Emacs has a lot of special functionality for producing LaTeX documents, org-mode has great capabilities of exporting to LaTeX (which can greatly simplify the process of writing LaTeX documents for users), and R has many ways of integrating with LaTeX documents for reproducible analyses.  BibTeX (and the alternative program =biblatex=) is a companion program that manages bibliographies and citations in LaTeX documents.

- [[http://www.r-project.org/][R]] :: R is an extremely popular and powerful software package for statistical analysis. It is controlled through a special programming language, but many users interact with it mainly by running commands to run analyses, and never have to learn the more in-depth programming aspects of it. One of the big advantages of R is that it is supported by a huge community, and a great many working statisticians contribute "packages" (free, easily-downloaded and integrated add-ons) that perform cutting-edge analyses and specialized functions.  The combination of open-source, easy extensibility, large academic community, and free cost make it an ideal platform for statistical analysis in research. R has also been on the forefront of providing utilities for reproducible research (for example, see [[http://lib.stat.cmu.edu/R/CRAN/][this link]] for a selection and brief description of a number of packages that provide functions for improved reproducibility).

In summary, this is a suite of some of the best software to come out of the open-source community. The tools work very well with each other, and in combination, they represent a comprehensive set of tools to create and manage entire research projects in more reproducible ways. Ultimately you will probably need to add other tools to the mix, depending on your work, but these tools are all mature and stable enough that you will never "outgrow" them. One goal of these tutorials is to enable you to start using them and incorporating them into your work as quickly as possible, so it's not an enormous time commitment to learn enough about them to benefit from a more reproducible research workflow.
** Structure and contents
All of the tools here have marvelous and extensive documentation, available in many places online, and in lots of published books and guides. However, many of these resources are geared towards programmers. My target audience is people like me, that is, researchers in the cognitive and social sciences (and maybe other fields, too). Therefore, my emphasis will be providing a set of tutorials to help you get started using these tools with minimal time investment, from the perspective that you may have zero experience with any kind of programming.

The tutorials on each of the tools is divided up as I have them listed above, and then listed as topics. Where the tools overlap, the tutorials will guide you towards what you need to know about each tool.  I'll order them in a sequence that I think is appropriate, but I'll try to make them as self-contained as possible, so you can pretty much just find a tutorial topic that sounds interesting, dive in, and if there are things you need to learn before you can tackle that topic, I'll try to point you towards those "prereqs." I think one of the good things about all of these tools is that learning to do some initial things is not very hard at all, but all of them are rich enough that any time invested will pay you back very quickly. So I will aim for each tutorial to be "bite-sized," around an hour or so of time commitment.

For each of the tools, I'll provide an overview document that expands on the brief descriptions above.  I'll touch on why I think the tool's functions are essential to reproducible research, and why I think that /particular/ tool is especially well-suited to the job.  So if you already have a favorite text editor and hate the idea of switching to Emacs (or you already use SVN and don't want to switch to git, or if you use Word and are flummoxed by LaTeX, or if you use SPSS and can't imagine switching to R, etc., etc.), read through those docs first, just to see where I'm coming from. You may realize that you can do just as well with a tool you use already, or you may discover that the tools you use already are lacking in some way.

After checking out the overview docs, I /highly/ recommend starting with git.  I'll explain why in its overview document, but it has the smallest learning curve, with perhaps some of the greatest benefits, and you can start using it /today/, no matter what other programs you are already using for writing, statistical analysis, etc.  After getting started with git, I recommend moving on to Emacs to get some basics, and then head over to org-mode.  If you are not currently writing lots of things in simple text formats, you may not have a lot of immediate use for Emacs.  Getting going with org-mode opens up a /lot/ of things you can do that are very functional and easy to learn, and which will help you get into using Emacs regularly, and more importantly, give you a taste of what you can get out of Emacs that you can't get elsewhere.

At that point, you should let your interests and immediate needs guide you.  Maybe you already use R, and want to see how using R within Emacs compares to your current approach.  Or maybe you are starting a draft of a paper and want to give LaTeX a try.  Or maybe you are starting a collaborative project and really want to get into some of the more in-depth functions of git that can help with collaboration.  Just pick topics that you can start using right away, and you will learn quicker and more effectively.
** Code and documents
In the spirit of reproducible research, all of the documents here will come in at least two flavors: PDFs that are immediately accessible and easy to read, and the org-mode "source" documents. In other words, I'm writing all of these tutorials in org-mode, so you can peek at those and try exporting them to PDF yourself (once you learn how to do that).  I am writing the documents with PDF export in mind, and PDF export is through LaTeX, so occasionally there may be some LaTeX mark-up in the documents.  But aside from these cases, the org-mode docs will render pretty well if you view them on the GitHub site, because GitHub is savvy to org-mode, and automatically renders org-mode pages via HTML export.  In other words, org-mode also exports to look like a web page, and GitHub does this automatically when you view an org-mode document on the site. If you download the repository and look at the org-mode files on your own computer, you will see the what the actual simple text looks like (you can also see this on GitHub by viewing the "raw" source).
** Miscellaneous background tutorials
While my intent is to make the tutorials pretty self-contained, there are some basic concepts and skills that I will pull apart into their own section. For example, if you have ever done any kind of programming, you will probably be familiar with how to interact with a command-line program, but some researchers may not have had this experience yet.  Instead of dealing with this in the tutorials for a particular tool (since they all involve some kind of command-line interface), I will provide a "generic" tutorial to help you catch up on the basics.  As I get feedback on what other "basic" things are missing, I'll add to these.
** Talk to me, and please have patience!
Finally, all of these tutorials will be works in progress, probably forever.  It will take some time for me to get around to all the topics I have in mind, so please be forgiving. But if you have suggestions or comments, please let me know. To be honest, my primary audience is myself, because putting these resources together is a good way for me to organize and solidify my own habits and practices, but if I was only doing this for myself, I wouldn't be putting it online.  I would love for these tutorials to help you with your own work, so any feedback that would help me do a better job of making these useful to others would be appreciated.

Thanks!
